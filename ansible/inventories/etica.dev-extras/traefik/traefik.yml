---
# See https://github.com/containous/traefik/blob/master/docs/content/reference/static-configuration/file.yaml
# See https://docs.traefik.io/user-guides/docker-compose/basic-example/
# See https://docs.traefik.io/user-guides/docker-compose/acme-tls/

global:
  checkNewVersion: true
  sendAnonymousUsage: false

entryPoints:
  web:
    address: ":80"
  websecure:
    address: ":443"
  traefik:
    address: ":8888"
 
## TODO: learn how to implement middlewares on Traefik 2.2 and then do an default
#        redirect http to https that could be referenced on docker-compose
#        containers (fititnt, 2020-04-07 01:34)

# @see https://docs.traefik.io/middlewares/redirectscheme/
# Redirect to https
# http:
#   middlewares:
#     test-redirectscheme:
#       redirectScheme:
#         scheme: https
#         #permanent: true

log:
  level: "DEBUG" # level: "ERROR"

accessLog:
  filePath: "/var/log/traefik/access.log"

api:
  insecure: true
  dashboard: true
  debug: true

ping:
  entryPoint: traefik

providers:
  docker:
    endpoint: "unix:///var/run/docker.sock"
    exposedByDefault: true

certificatesresolvers:
  letsencrypt:
    acme:
      email: no-reply@etica.dev
      storage: /etc/traefik/acme.json
      tlschallenge: true
      # Use the Let's Encrypt test server
      # caserver: "https://acme-staging-v02.api.letsencrypt.org/directory"

  # This is an example. The DNS challange needs tokens depending of the provider
  # @see https://docs.traefik.io/user-guides/docker-compose/acme-dns/
  letsencryptDns:
    acme:
      email: no-reply@etica.dev
      storage: /etc/traefik/acme.json
      dnschallenge:
        provider: "ovh" # cloudflare, digitalocean, ...
