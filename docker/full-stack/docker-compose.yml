version: "3"

# See https://docs.docker.com/compose/django/
# @see https://github.com/bubelov/traefik-letsencrypt-compose/blob/master/docker-compose.yml
# @see https://containo.us/blog/traefik-2-0-docker-101-fc2893944b9d/

services:
  # hxldash:
  
  # hello:
  #   image: nginxdemos/hello
  #   labels:
  #     - traefik.http.routers.http.rule=Host(`hello.hxl.etica.dev`)
  #     - traefik.http.routers.https.rule=Host(`hello.hxl.etica.dev`)
  #     - traefik.http.routers.https.entrypoints=https
  #     - traefik.http.routers.https.tls=true
  #     # - traefik.http.routers.https.tls.certresolver=letsencrypt

  whoami:
    image: containous/whoami
    container_name: whoami
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`whoami.hxl.etica.dev`)"
      - "traefik.http.routers.whoami.entrypoints=web,websecure"
      - "traefik.http.routers.whoami.tls.certresolver=letsencrypt"
      # TODO: implement middleware 'redirect HTTP to HTTPS' (fititnt, 2020-04-07 00>39 BRT)
      # - "traefik.http.routers.http.middlewares=redirect"
      - "traefik.http.middlewares.test-auth.basicauth.users=test:$$apr1$$H6uskkkW$$IgXLP6ewTrSuBkTrqE8wj/,test2:$$apr1$$d9hr9HBB$$4HxwgUir3HP4EsggP/QNo0"

  dash:
    image: covidtaskforcecplp/hxldash:latest
    container_name: dash
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dash.rule=Host(`dash.hxl.etica.dev`)"
      - "traefik.http.routers.dash.entrypoints=web,websecure"
      - "traefik.http.routers.dash.tls.certresolver=letsencrypt"
      # TODO: implement middleware 'redirect HTTP to HTTPS' (fititnt, 2020-04-07 00>39 BRT)
      # - "traefik.http.routers.http.middlewares=redirect"

  # TODO: make it work
  # @see https://github.com/HXLStandard/hxl-proxy/blob/master/docker_files/docker-compose.yml
  proxy:
    image: unocha/hxl-proxy:1.18 # see https://hub.docker.com/r/unocha/hxl-proxy/tags
    container_name: proxy
    # command: python manage.py runserver 0.0.0.0:8000
    # depends_on:
    #   - postgres_hxl-proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.proxy.rule=Host(`proxy.hxl.etica.dev`)"
      - "traefik.http.routers.proxy.entrypoints=web,websecure"
      - "traefik.http.routers.proxy.tls.certresolver=letsencrypt"
      # TODO: implement middleware 'redirect HTTP to HTTPS' (fititnt, 2020-04-07 00>39 BRT)
      # - "traefik.http.routers.http.middlewares=redirect"

  # postgres_hxl-proxy:
  #   image: postgres

  # Portainer + agent: https://github.com/portainer/portainer-compose/blob/master/docker-stack.yml
  # agent:
  #   image: portainer/agent
  #   environment:
  #     # REQUIRED: Should be equal to the service name prefixed by "tasks." when
  #     # deployed inside an overlay network
  #     AGENT_CLUSTER_ADDR: tasks.agent
  #     # AGENT_PORT: 9001
  #     # LOG_LEVEL: debug
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - /var/lib/docker/volumes:/var/lib/docker/volumes
  #   networks:
  #     - agent_network
  #   # deploy:
  #   #   mode: global
  #   #   placement:
  #   #     constraints: [node.platform.os == linux]

  # Admin Access (hxl.etiva.dev server) admin:cplppass
  portainer:
    image: portainer/portainer
    # command: -H tcp://tasks.agent:9001 --tlsskipverify
    # TODO: remove these exposed ports
    ports:
      - "9000:9000"
      - "8000:8000"
    volumes:
      - portainer_data:/data
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    # networks:
    #   - agent_network
    # deploy:
    #   mode: replicated
    #   replicas: 1
    #   placement:
    #     constraints: [node.role == manager]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`portainer.hxl.etica.dev`)"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
      - "traefik.http.routers.portainer.entrypoints=web,websecure"
      - "traefik.http.routers.portainer.tls.certresolver=letsencrypt"

# networks:
#   agent_network:
#     driver: overlay

volumes:
  portainer_data:
